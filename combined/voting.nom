type val = 1

type dictionary = &{add : <{*}| int -> val -o dictionary,
                    delete : <{*}| int -> val * dictionary,
                    check : <{*}| int -> bool ^ dictionary,
                    size : <{*}| int ^ dictionary}

proc asset newval : . |{*}- ($v : val) =
{
  close $v
}

proc asset dummy : (n : int) |{*}- ($d : dictionary) =
{
  case $d (
    add => get $d {*} ;
            key = recv $d ;
            $v <- recv $d ;
            wait $v ;
            let n = n+1 ;
            $d <- dummy <- n
  | delete => get $d {*} ;
              key = recv $d ;
              $v <- newval <- ;
              send $d $v ;
              let n = n-1 ;
              $d <- dummy <- n
  | check => get $d {*} ;
              key = recv $d ;
              if key > 0
              then
                send $d true ;
                $d <- dummy <- n
              else
                send $d false ;
                $d <- dummy <- n
  | size => get $d {*} ;
            send $d n ;
            $d <- dummy <- n
  )
}

type ballot = /\ <{*}| +{open : int -> +{vote : int -> |{*}> \/ ballot,
                                         novote : |{*}> \/ ballot},
                         closed : int ^ |{*}> \/ ballot}

proc asset candidate : (addr : int) |{*}- ($c : 1) =
{
  close $c
}

proc contract open_election : (T : int), ($votes : dictionary) |{*}- (#sb : ballot) =
{
  $lb <- accept #sb ;
  get $lb {*} ;
  $lb.open ;
  v = recv $lb ;
  $votes.check ;
  pay $votes {*} ;
  send $votes v ;
  r = recv $votes ;
  if r
  then
    $lb.vote ;
    c = recv $lb ;
    $c <- candidate <- c ;
    $votes.add ;
    pay $votes {*} ;
    send $votes v ;
    send $votes $c ;
    pay $lb {*} ;
    #sb <- detach $lb ;
    #sb <- check <- T $votes
  else
    $lb.novote ;
    pay $lb {*} ;
    #sb <- detach $lb ;
    #sb <- open_election <- T $votes
}

proc contract check : (T : int), ($votes : dictionary) |{*}- (#sb : ballot) =
{
  $votes.size ;
  pay $votes {*} ;
  n = recv $votes ;
  if n = T
  then
    #sb <- open_election <- T $votes
  else
    #sb <- closed_election <- T $votes
}

proc contract closed_election : (w : int), ($votes : dictionary) |{*}- (#sb : ballot) =
{
  $lb <- accept #sb ;
  get $lb {*} ;
  $lb.closed ;
  send $lb w ;
  pay $lb {*} ;
  #sb <- detach $lb ;
  #sb <- closed_election <- w $votes
}