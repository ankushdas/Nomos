type money = &{value : <{*}| int ^ money,
               coins : <{*}| lcoin,
               check_pwd : <{*}| int -> bool ^ money}
type lcoin = 1

proc asset emp : . |{*}- ($l : lcoin) = 
{
  close $l
}

proc asset empty_wallet : (pwd : int) |{*}- ($m : money) = 
{
  $l <- emp <- ;
  let n = 0 ;
  $m <- wallet <- pwd n $l
}

proc asset wallet : (pwd : int), (n : int), ($l : lcoin) |{*}- ($m : money) = 
{
    case $m (
      value => get $m {*};
               send $m n;
               $m <- wallet <- pwd n $l 
    | coins => get $m {*} ;
               $m <- $l
    | check_pwd => get $m {*} ;
                   p = recv $m ;
                   if p = pwd
                   then
                      send $m true ;
                      $m <- wallet <- pwd n $l
                   else
                      send $m false ;
                      $m <- wallet <- pwd n $l
    )
}

type dictionary = &{add : <{*}| int -> money -o dictionary,
                    delete : <{*}| int -> money * dictionary,
                    check : <{*}| int -> bool ^ dictionary,
                    size : <{*}| int ^ dictionary}

proc asset dummy : (n : int) |{*}- ($d : dictionary) =
{
  case $d (
    add => get $d {*} ;
           key = recv $d ;
           $v <- recv $d ;
           $v.coins ;
           pay $v {*} ;
           wait $v ;
           let n = n+1 ;
           $d <- dummy <- n
  | delete => get $d {*} ;
              key = recv $d ;
              $v <- empty_wallet <- key ;
              send $d $v ;
              let n = n-1 ;
              $d <- dummy <- n 
  | check => get $d {*} ;
              key = recv $d ;
              if key > 0
              then
                send $d true ;
                $d <- dummy <- n
              else
                send $d false ;
                $d <- dummy <- n
  | size => get $d {*} ;
            send $d n ;
            $d <- dummy <- n
  )
}

type account = /\ <{*}| &{signup : int -> int -> |{*}> \/ account,
                          login : int -> int -> +{failure : |{*}> \/ account,
                                                  success : &{deposit : money -o |{*}> \/ account,
                                                              balance : int ^ |{*}> \/ account,
                                                              withdraw : int -> money * |{*}> \/ account }}}


proc contract bank : ($accts : dictionary) |{*}- (#sa : account) =
{
  $la <- accept #sa ;
  get $la {*} ;
  case $la (
    signup => id = recv $la ;
              pwd = recv $la ;
              $m <- empty_wallet <- pwd ;
              $accts.add ;
              pay $accts {*} ;
              send $accts id ;
              send $accts $m ;
              pay $la {*} ;
              #sa <- detach $la ;
              #sa <- bank <- $accts
  | login => id = recv $la ;
             pwd = recv $la ;
             

  )
}