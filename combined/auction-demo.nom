type auction = /\ <{*}| +{running : &{bid : int -> money -o |{*}> \/ auction,
                                      cancel : |{*}> \/ auction},
                          ended : &{collect : int -> +{won : lot * |{*}> \/ auction,
                                                 lost : money * |{*}> \/ auction},
                                    cancel : |{*}> \/ auction}}

proc contract run : (T : int), (w : int), (v : int), ($b : dictionary), ($l : lot) |{*}- (#sa : auction) =
{
  $la <- accept #sa ;
  get $la {*} ;
  $la.running ;
  case $la (
    bid => r = recv $la ;
           $m <- recv $la ;
           pay $la {*} ;
           #sa <- detach $la ;
           $m.value ;
           pay $m {*} ;
           bv = recv $m ;
           $newb <- addbid <- r $m $b ;
           if bv > v
           then
              #sa <- check <- T r bv $newb $l
           else
              #sa <- check <- T w v $newb $l
  | cancel => pay $la {*} ;
              #sa <- detach $la ;
              #sa <- run <- T w v $b $l
  )
}

proc contract check : (T : int), (w : int), (v : int), ($b : dictionary), ($l : lot) |{*}- (#sa : auction) =
{
  $b.size ;
  pay $b {*} ;
  n = recv $b ;
  if n = T
  then
    #sa <- end_lot <- T w $b $l
  else
    #sa <- run <- T w v $b $l
}

proc contract end_lot : (T : int), (w : int), ($b : dictionary), ($l : lot) |{*}- (#sa : auction) =
{
  $la <- accept #sa ;
  get $la {*} ;
  $la.ended ;
  case $la (
    collect => r = recv $la ;
               if w = r
               then
                  $la.won ;
                  send $la $l ;
                  pay $la {*} ;
                  #sa <- detach $la ;
                  #sa <- end_nolot <- T w $b
               else
                  $la.lost ;
                  $newb <- removebid <- r $b ;
                  $m <- recv $newb ;
                  send $la $m ;
                  pay $la {*} ;
                  #sa <- detach $la ;
                  #sa <- end_lot <- T w $newb $l
  | cancel => pay $la {*} ;
              #sa <- detach $la ;
              #sa <- end_lot <- T w $b $l
  )
}

proc contract end_nolot : (T : int), (w : int), ($b : dictionary) |{*}- (#sa : auction) =
{
  $la <- accept #sa ;
  get $la {*} ;
  $la.ended ;
  case $la (
    collect => r = recv $la ;
               $la.lost ;
               $newb <- removebid <- r $b ;
               $m <- recv $newb ;
               send $la $m ;
               pay $la {*} ;
               #sa <- detach $la ;
               work {*} ;
               #sa <- end_nolot <- T w $newb
  | cancel => pay $la {*} ;
              #sa <- detach $la ;
              work {*} ;
              #sa <- end_nolot <- T w $b
  )
}

proc asset addbid : (r : int), ($m : money), ($bs : dictionary) |{*}- ($newbs : dictionary) =
  {
    $bs.add ;
    pay $bs {*} ;
    send $bs r ;
    send $bs $m ;
    $newbs <- $bs
  }



proc asset removebid : (r : int), ($bs : dictionary) |{*}- ($newbs : money * dictionary) =
  {
    $bs.delete ;
    pay $bs {*} ;
    send $bs r ;
    $m <- recv $bs ;
    send $newbs $m ;
    $newbs <- $bs
  }



















type money = &{value : <{*}| int ^ money,
               coins : <{*}| lcoin}
type lcoin = 1

proc asset emp : . |{*}- ($l : lcoin) = 
{
  close $l
}

proc asset empty_wallet : . |{*}- ($m : money) = 
{
  $l <- emp <- ;
  let n = 0 ;
  $m <- wallet <- n $l
}

proc asset wallet : (n : int), ($l : lcoin) |{*}- ($m : money) = 
{
    case $m (
      value => get $m {*};
               send $m n;
               $m <- wallet <- n $l 
    | coins => get $m {*} ;
               $m <- $l
    )
}

type dictionary = &{add : <{*}| int -> money -o dictionary,
                    delete : <{*}| int -> money * dictionary,
                    check : <{*}| int -> bool ^ dictionary,
                    size : <{*}| int ^ dictionary}

proc asset dummy : (n : int) |{*}- ($d : dictionary) =
{
  case $d (
    add => get $d {*} ;
            key = recv $d ;
            $v <- recv $d ;
            $v.coins ;
            pay $v {*} ;
            wait $v ;
            let n = n+1 ;
            $d <- dummy <- n
  | delete => get $d {*} ;
              key = recv $d ;
              $v <- empty_wallet <- ;
              send $d $v ;
              let n = n-1 ;
              $d <- dummy <- n 
  | check => get $d {*} ;
              key = recv $d ;
              if key > 0
              then
                send $d true ;
                $d <- dummy <- n
              else
                send $d false ;
                $d <- dummy <- n
  | size => get $d {*} ;
            send $d n ;
            $d <- dummy <- n
  )
}

type lot = 1

