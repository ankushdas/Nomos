type msg = int ^ 1

type comm = /\ &{ SEND : msg -o \/ comm,
                  RECV : +{ no : \/ comm,
                            yes : msg * \/ comm }}

type list_comms = +{cons : comm * list_comms,
                    nil : 1}

proc contract empty_communicator : (sid : int), (rid : int) |- (#dc : comm) =
{
  $ldc <- accept #dc ;
  case $ldc (
    SEND => $msg <- recv $ldc ;
            #dc <- detach $ldc ;
            #dc <- full_communicator <- sid rid $msg
  | RECV => $ldc.no ;
            #dc <- detach $ldc ;
            #dc <- empty_communicator <- sid rid
  )
}

proc contract full_communicator : (sid : int), (rid : int), ($msg : msg) |- (#dc : comm) =
{
  $ldc <- accept #dc ;
  case $ldc (
    SEND => print ("dealer communicator cannot receive 2 messages\n");
            abort
  | RECV => $ldc.yes ;
            send $ldc $msg ;
            #dc <- detach $ldc ;
            #dc <- done_communicator <- sid rid
  )
}

proc contract done_communicator : (sid : int), (rid : int) |- (#dc : comm) =
{
  $ldc <- accept #dc ;
  case $ldc (
    SEND => print ("terminated dealer communicator cannot receive messages\n");
            abort
  | RECV => print ("terminated dealer communicator cannot send messages\n");
            abort
  )
}

proc asset create_send_msg : (m : int) |- ($msg : msg) =
{
  send $msg m ;
  close $msg
}

proc transaction dealer_init : (id : int), (m : int) |- ($d : recv_comms) =
{
  print ("created dealer with id %d and number %d\n", id, m);
  $comms <- nil <- ;
  $d <- dealer_recv <- id m $comms
}

type recv_comms = &{next : comm -o recv_comms,
                    done : 1}

proc transaction dealer_recv : (id : int), (m : int), ($comms : list_comms) |- ($d : recv_comms) =
{
  case $d (
    next => #c <- recv $d ;
            $comms_new <- cons <- $comms #c ;
            $d <- dealer_recv <- id m $comms_new
  | done => $d <- dealer <- id m $comms
  )
}

proc transaction dealer : (id : int), (m : int), ($dcs : list_comms) |- ($d : 1) =
{
  case $dcs (
    cons => #dc <- recv $dcs ;
            $ldc <- acquire #dc ;
            $ldc.SEND ;
            $msg <- create_send_msg <- m ;
            send $ldc $msg ;
            #dc <- release $ldc ;
            $d <- dealer <- id m $dcs
  | nil => wait $dcs ;
           close $d
  )
}

proc transaction cons : ($tl : list_comms), (#d : comm) |- ($l : list_comms) =
{
  $l.cons ;
  send $l #d ;
  $l <- $tl
}

proc transaction nil : . |- ($l : list_comms) =
{
  $l.nil ;
  close $l
}

type recv_dealer_comm = comm -o int ^ 1

proc transaction party_init : (id : int), (T : int) |- ($p : recv_dealer_comm) =
{
  print ("created party with id %d\n", id);
  #c <- recv $p ;
  $p <- party_recv_from_dealer <- id T #c
}

proc transaction party_recv_from_dealer : (id : int), (T : int), (#dc : comm) |- ($p : int ^ 1) =
{
  $ldc <- acquire #dc ;
  $ldc.RECV ;
  case $ldc (
    no => #dc <- release $ldc ;
          $p <- party_recv_from_dealer <- id T #dc
  | yes => $msg <- recv $ldc ;
           #dc <- release $ldc ;
           m = recv $msg ;
           wait $msg ;
           send $p m ;
           close $p
  )
}

(*
proc asset create_echo_msg : (m : int) |- ($msg : msg) =
{
  send $msg m ;
  close $msg
}

proc transaction party_send : (id : int), (T : int), (m : int), (#dc : comm),
  ($unsent_comms : list_comms), ($sent_comms : list_comms) |- ($d : int ^ 1) =
{
  case $unsent_comms (
    cons => #sd <- recv $unsent_comms ;
            $ld <- acquire #sd ;
            $ld.SEND ;
            $msg <- create_echo_msg <- m ;
            send $ld $msg ;
            #sd <- release $ld ;
            $new_sent_comms <- cons <- $sent_comms #sd ;
            $d <- party_send <- id T m #dc $unsent_comms $new_sent_comms
  | nil => wait $unsent_comms ;
           let num_echos = 0;
           $checked_comms <- nil <- ;
           $d <- party_recv <- id T num_echos m #dc $sent_comms $checked_comms
  )
}

proc transaction throw : ($l : list_comms) |- ($c : 1) =
{
  case $l (
    cons => #sd <- recv $l ;
            $c <- throw <- $l
  | nil => $c <- $l
  )
}

proc transaction party_recv : (id : int), (T : int), (num_echos : int), (m : int),
  (#dc : comm),
  ($unchecked_comms : list_comms),
  ($checked_comms : list_comms) |- ($d : int ^ 1) =
{
  case $unchecked_comms (
    cons => #sd <- recv $unchecked_comms ;
            $ld <- acquire #sd ;
            $ld.RECV ;
            case $ld (
              no => #sd <- release $ld ;
                    $new_checked_comms <- cons <- $checked_comms #sd ;
                    $d <- party_recv <- id T num_echos m #dc $unchecked_comms $new_checked_comms
            | yes => $msg <- recv $ld ;
                     #sd <- release $ld ;
                     echo_m = recv $msg ;
                     wait $msg ;
                     $new_checked_comms <- cons <- $checked_comms #sd ;
                     if m <> echo_m
                     then
                      abort
                     else
                      let num_echos = num_echos + 1;
                      $d <- party_recv <- id T num_echos m #dc $unchecked_comms $new_checked_comms
            )
  | nil => wait $unchecked_comms ;
           if num_echos >= T
           then
            send $d m ;
            $c <- throw <- $checked_comms ;
            wait $c ;
            close $d
           else
            $new_checked_comms <- nil <- ;
            $d <- party_recv <- id T num_echos m #dc $checked_comms $new_checked_comms
  )
}
*)

proc transaction create_communicators : (dealer_id : int), (N : int) |- ($dcs : list_comms * list_comms) =
{
  if N = 0
  then
    $l1 <- nil <- ;
    $l2 <- nil <- ;
    send $dcs $l1 ;
    $dcs <- $l2
  else
    let M = N-1;
    $tldcs2 <- create_communicators <- dealer_id M ;
    $tldcs1 <- recv $tldcs2 ;
    #pdc <- empty_communicator <- dealer_id N ;
    $l1 <- cons <- $tldcs1 #pdc ;
    $l2 <- cons <- $tldcs2 #pdc ;
    send $dcs $l1 ;
    $dcs <- $l2
}

proc transaction create_party_communicators : (N : int) |- ($dcs : list_comms * list_comms) =
{
  if N = 0
  then
    $l1 <- nil <- ;
    $l2 <- nil <- ;
    send $dcs $l1 ;
    $dcs <- $l2
  else
    abort
}

proc transaction create_parties : (N : int), (T : int),
  (dealer_id : int), ($d : recv_comms) |- ($ps : 1) =
{
  if N = 0
  then
    $d.done ;
    $ps <- $d
  else
    #dcp <- empty_communicator <- dealer_id N ;
    $d.next ;
    send $d #dcp ;
    let M = N-1;
    $ps_tl <- create_parties <- M T dealer_id $d ;
    $p <- party_init <- N T ;
    send $p #dcp ;
    m = recv $p ;
    wait $p ;
    $ps <- $ps_tl
}

proc transaction main : . |- ($mn : 1) =
{
  let N = 5 ;
  let T = 3 ;
  let m = 1729 ;
  let dealer_id = 0;
  $d <- dealer_init <- dealer_id m ;
  $ps <- create_parties <- N T dealer_id $d ;
  wait $ps ;
  close $mn
}

exec main