type puzzle = /\ <{*}| &{update: int -> money -o |{*}> \/ puzzle,
                         submit: int ^ &{success: int -> money * |{*}> \/ puzzle,
                                         failure: |{*}> \/ puzzle}}


type money = &{value : <{*}| int ^ money, 
               Coins : <{*}| lCoin}
type lCoin = 1


proc asset join : ($m : lCoin), ($n : lCoin) |{*}- ($o : lCoin) = 
{
    wait $m ;
    wait $n ;
    close $o
}

proc asset consume : ($m : money) |{*}- ($o : 1) = 
{
    $m.Coins ;
    pay $m {*} ;
    $o <- $m
}

proc asset add : ($m : money), ($n : money) |{*}- ($o : money) = 
  {
    $m.value ;
    pay $m {*} ;
    mval = recv $m ;
    $n.value ;
    pay $n {*} ;
    nval = recv $n ;
    let oval = mval + nval ;
    $m.Coins ;
    pay $m {*} ;
    $n.Coins ;
    pay $n {*} ;
    $oCoin <- join <- $m $n ;
    $o <- wallet <- oval $oCoin
  }

proc asset wallet : (n : int), ($l : lCoin) |{*}- ($m : money) = 
{
    case $m (
      value => get $m {*};
               send $m n;
               $m <- wallet <- n $l 
    | Coins => get $m {*} ;
               $m <- $l
    )
}

proc asset emp : . |{*}- ($l : lCoin) = 
{
  close $l
}

proc asset empty_wallet : . |{*}- ($m : money) = 
{
  $l <- emp <- ;
  let n = 0 ;
  $m <- wallet <- n $l
}


proc contract game : (addr : int), ($m : money) |{*}- (#sp : puzzle) = 
{
    $lp <- accept #sp ;
    get $lp {*} ;
    case $lp
    (
      update => n = recv $lp ;
                $r <- recv $lp ;
                if n = addr 
                then 
                $newm <- add <- $m $r ;
                pay $lp {*} ;
                #sp <- detach $lp ;
                #sp <- game <- addr $newm
                else
                $tmp <- consume <- $r ;
                wait $tmp ;
                pay $lp {*} ;
                #sp <- detach $lp ;
                work {*} ;
                #sp <- game <- addr $m
    | submit => $m.value ;
                pay $m {*} ;
                mval = recv $m ;
                send $lp mval ;
                case $lp 
                (
                  success => sol = recv $lp;
                             send $lp $m ;
                             pay $lp {*} ;
                             #sp <- detach $lp ;
                             $emp <- empty_wallet <- ;
                             #sp <- game <- addr $emp
                | failure => pay $lp {*} ;
                            #sp <- detach $lp ;
                            #sp <- game <- addr $m
                )

    )

}


