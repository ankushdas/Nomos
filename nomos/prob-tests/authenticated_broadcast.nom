type msg = p+{ drop{0.5} : 1, pick{0.5} : int ^ 1}

type comm = /\ &{ SEND : msg -o \/ comm,
                  RECV : +{ no : \/ comm,
                            yes : msg * \/ comm }}

type list_comms = +{cons : comm * list_comms,
                    nil : 1}

proc contract empty_communicator : (sid : int), (rid : int) |- (#dc : comm) =
{
  $ldc <- accept #dc ;
  case $ldc (
    SEND => $msg <- recv $ldc ;
            print ("%d-%d comm acquired by %d: message received\n", sid, rid, sid);
            #dc <- detach $ldc ;
            #dc <- full_communicator <- sid rid $msg
  | RECV => $ldc.no ;
            print ("%d-%d comm acquired by %d: no message\n", sid, rid, rid);
            #dc <- detach $ldc ;
            #dc <- empty_communicator <- sid rid
  )
}

proc contract full_communicator : (sid : int), (rid : int), ($msg : msg) |- (#dc : comm) =
{
  $ldc <- accept #dc ;
  case $ldc (
    SEND => print ("comm cannot receive 2 messages\n");
            abort
  | RECV => $ldc.yes ;
            print ("%d-%d comm acquired by %d: message delivered\n", sid, rid, rid);
            send $ldc $msg ;
            #dc <- detach $ldc ;
            #dc <- done_communicator <- sid rid
  )
}

proc contract done_communicator : (sid : int), (rid : int) |- (#dc : comm) =
{
  $ldc <- accept #dc ;
  case $ldc (
    SEND => print ("terminated comm cannot receive messages\n");
            abort
  | RECV => (*
            $ldc.no ;
            print ("%d-%d comm acquired by %d: no message\n", sid, rid, rid);
            #dc <- detach $ldc ;
            #dc <- done_communicator <- sid rid
            *)
            print ("terminated comm cannot send messages\n");
            abort
  )
}

proc asset create_msg : (m : int) |- ($msg : msg) =
{
  flip {0.5} (
    HH => $msg..pick ;
          send $msg m ;
          close $msg
  | TT => $msg..drop ;
          close $msg
  )
}

proc transaction dealer_init : (id : int), (m : int) |- ($d : recv_comms) =
{
  print ("created dealer with id %d and number %d\n", id, m);
  $comms <- nil <- ;
  $d <- dealer_recv <- id m $comms
}

type recv_comms = &{next : comm -o recv_comms,
                    done : 1}

proc transaction dealer_recv : (id : int), (m : int), ($comms : list_comms) |- ($d : recv_comms) =
{
  case $d (
    next => #c <- recv $d ;
            $comms_new <- cons <- $comms #c ;
            $d <- dealer_recv <- id m $comms_new
  | done => $d <- dealer <- id m $comms
  )
}

proc transaction dealer : (id : int), (m : int), ($dcs : list_comms) |- ($d : 1) =
{
  case $dcs (
    cons => #dc <- recv $dcs ;
            $ldc <- acquire #dc ;
            $ldc.SEND ;
            $msg <- create_msg <- m ;
            send $ldc $msg ;
            #dc <- release $ldc ;
            print ("dealer: sent number %d to %c\n", m, #dc);
            $d <- dealer <- id m $dcs
  | nil => wait $dcs ;
           close $d
  )
}

proc transaction cons : ($tl : list_comms), (#d : comm) |- ($l : list_comms) =
{
  $l.cons ;
  send $l #d ;
  $l <- $tl
}

proc transaction nil : . |- ($l : list_comms) =
{
  $l.nil ;
  close $l
}

type recv_dealer_comm = comm -o recv_party_comms

type recv_party_comms = &{nextsend : comm -o recv_party_comms,
                          nextrecv : comm -o recv_party_comms,
                          getid : int ^ recv_party_comms,
                          done : int ^ 1}

proc transaction party_init : (id : int), (T : int) |- ($p : recv_dealer_comm) =
{
  print ("created party with id %d\n", id);
  #c <- recv $p ;
  $p <- party_recv_from_dealer <- id T #c
}

proc asset parse : ($m : msg) |- ($n : int ^ 1) =
{
  pcase $m (
    drop => send $n 0 ; wait $m ;
            close $n
  | pick => m = recv $m ; wait $m ;
            send $n m ;
            close $n
  )
}

proc transaction party_recv_from_dealer : (id : int), (T : int), (#dc : comm) |- ($p : recv_party_comms) =
{
  $ldc <- acquire #dc ;
  $ldc.RECV ;
  case $ldc (
    no => #dc <- release $ldc ;
          $p <- party_recv_from_dealer <- id T #dc
  | yes => $msg <- recv $ldc ;
           #dc <- release $ldc ;
           $newmsg <- parse <- $msg ;
           m = recv $newmsg ;
           wait $newmsg ;
           $send_comms <- nil <- ;
           $recv_comms <- nil <- ;
           $p <- party_recv_comms <- id T m #dc $send_comms $recv_comms
  )
}

proc transaction throw : ($l : list_comms) |- ($c : 1) =
{
  case $l (
    cons => #sd <- recv $l ;
            $c <- throw <- $l
  | nil => $c <- $l
  )
}

proc transaction party_recv_comms : (id : int), (T : int), (m : int),
  (#dc : comm), ($send_comms : list_comms), ($recv_comms : list_comms) |- ($p : recv_party_comms) =
{
  case $p (
    nextsend => #sc <- recv $p ;
                print ("received %c sender comm on party %d\n", #sc, id);
                $send_comms_new <- cons <- $send_comms #sc ;
                $p <- party_recv_comms <- id T m #dc $send_comms_new $recv_comms
  | nextrecv => #rc <- recv $p ;
                print ("received %c receiver comm on party %d\n", #rc, id);
                $recv_comms_new <- cons <- $recv_comms #rc ;
                $p <- party_recv_comms <- id T m #dc $send_comms $recv_comms_new
  | getid => send $p id ;
             $p <- party_recv_comms <- id T m #dc $send_comms $recv_comms
  | done => print ("party %d: received all comms, now sending echo messages\n", id);
            $sent_comms <- nil <- ;
            $p <- party_send_echos <- id T m #dc $send_comms $sent_comms $recv_comms
  )
}

proc transaction party_send_echos : (id : int), (T : int), (m : int), (#dc : comm),
  ($unsent_comms : list_comms), ($sent_comms : list_comms), ($recv_comms : list_comms) |- ($p : int ^ 1) =
{
  case $unsent_comms (
    cons => #sd <- recv $unsent_comms ;
            $ld <- acquire #sd ;
            $ld.SEND ;
            $msg <- create_msg <- m ;
            send $ld $msg ;
            #sd <- release $ld ;
            $new_sent_comms <- cons <- $sent_comms #sd ;
            $p <- party_send_echos <- id T m #dc $unsent_comms $new_sent_comms $recv_comms
  | nil => wait $unsent_comms ;
           let num_echos = 0;
           $checked_comms <- nil <- ;
           $received_comms <- nil <- ;
           $p <- party_recv_echos <- id T m num_echos #dc $sent_comms $received_comms $recv_comms $checked_comms
  )
}

proc transaction party_recv_echos : (id : int), (T : int), (m : int), (num_echos : int),
  (#dc : comm), ($send_comms : list_comms), ($received_comms : list_comms),
  ($unchecked_comms : list_comms), ($checked_comms : list_comms) |- ($p : int ^ 1) =
{
  case $unchecked_comms (
    cons => #sd <- recv $unchecked_comms ;
            $ld <- acquire #sd ;
            $ld.RECV ;
            case $ld (
              no => #sd <- release $ld ;
                    $new_checked_comms <- cons <- $checked_comms #sd ;
                    $p <- party_recv_echos <- id T m num_echos #dc $send_comms $received_comms $unchecked_comms $new_checked_comms
            | yes => $msg <- recv $ld ;
                     #sd <- release $ld ;
                     $newmsg <- parse <- $msg ;
                     echo_m = recv $newmsg ;
                     wait $newmsg ;
                     $new_received_comms <- cons <- $received_comms #sd ;
                     if m <> echo_m
                     then
                      print ("party %d received echo message on %c with number %d, does not match with dealer %d\n", id, #sd, echo_m, m);
                      abort
                     else
                      let num_echos_new = num_echos + 1;
                      $p <- party_recv_echos <- id T m num_echos_new #dc $send_comms $new_received_comms $unchecked_comms $checked_comms
            )
  | nil => wait $unchecked_comms ;
           if num_echos >= T
           then
            $dums <- throw <- $send_comms ;
            $dumr <- throw <- $received_comms ;
            $dumc <- throw <- $checked_comms ;
            wait $dums ;
            wait $dumr ;
            wait $dumc ;
            print ("party %d: received %d echo messages, now outputting %d and terminating\n", id, T, m);
            send $p m ;
            close $p
           else
            $new_checked_comms <- nil <- ;
            $p <- party_recv_echos <- id T m num_echos #dc $send_comms $received_comms $checked_comms $new_checked_comms
  )
}

type list_parties = +{cons : recv_party_comms * list_parties,
                      nil : 1}

proc transaction create_parties : (N : int), (T : int),
  (dealer_id : int), ($d : recv_comms) |- ($ps : list_parties) =
{
  if N = 0
  then
    print ("all parties created\n");
    $d.done ;
    wait $d ;
    $ps.nil ;
    close $ps
  else
    #dcp <- empty_communicator <- dealer_id N ;
    $d.next ;
    send $d #dcp ;
    let M = N-1;
    $ps_tl <- create_parties <- M T dealer_id $d ;
    $p <- party_init <- N T ;
    send $p #dcp ;
    print ("created %d-%d comm: %c\n", dealer_id, N, #dcp);
    $ps.cons ;
    send $ps $p ;
    $ps <- $ps_tl
}

proc transaction pcons : ($tl : list_parties), ($p : recv_party_comms) |- ($l : list_parties) =
{
  $l.cons ;
  send $l $p ;
  $l <- $tl
}

proc transaction pnil : . |- ($l : list_parties) =
{
  $l.nil ;
  close $l
}

proc transaction pappend : ($l1 : list_parties), ($l2 : list_parties) |- ($l : list_parties) =
{
  case $l1 (
    cons => $p <- recv $l1 ;
            $l.cons ;
            send $l $p ;
            $l <- pappend <- $l1 $l2
  | nil => wait $l1 ;
           $l <- $l2
  )
}

proc transaction get_party : ($ps : list_parties), (I : int), ($tl : list_parties) |- ($ips : recv_party_comms * list_parties) =
{
  case $ps (
    cons => $p <- recv $ps ;
            $p.getid ;
            id = recv $p ;
            if I = id
            then
              send $ips $p ;
              $ips <- pappend <- $ps $tl
            else
              $newtl <- pcons <- $tl $p ;
              $ips <- get_party <- $ps I $newtl
  | nil => print ("could not find party with id: %d\n", I);
           abort
  )
}

proc transaction create_p2p_communicator : (I : int), (J : int), ($ps : list_parties) |- ($pso : list_parties) =
{
  #pcp <- empty_communicator <- I J ;
  print ("created %d-%d comm: %c\n", I, J, #pcp);
  $nilI <- pnil <- ;
  $ips <- get_party <- $ps I $nilI ;
  $i <- recv $ips ;
  $nilJ <- pnil <- ;
  $jps <- get_party <- $ips J $nilJ ;
  $j <- recv $jps ;
  $i.nextsend ;
  send $i #pcp ;
  print ("sent %c comm to sender party %d\n", #pcp, I);
  $j.nextrecv ;
  send $j #pcp ;
  print ("sent %c comm to receiver party %d\n", #pcp, J);
  $onlyjps <- pcons <- $jps $j ;
  $bothijps <- pcons <- $onlyjps $i ;
  $pso <- $bothijps
}

proc transaction create_all_communicators : (I : int), (J : int), (N : int), ($ps_in : list_parties) |- ($ps_out : list_parties) =
{
  if I = N+1
  then
    print ("all p2p comms created\n");
    $ps_out <- $ps_in
  else
    if J = N+1
    then
      let In = I+1;
      let Jn = 1;
      $ps_out <- create_all_communicators <- In Jn N $ps_in
    else
      let In = I;
      let Jn = J+1;
      if I = J
      then
        $ps_out <- create_all_communicators <- In Jn N $ps_in
      else
        $ps <- create_p2p_communicator <- I J $ps_in ;
        $ps_out <- create_all_communicators <- In Jn N $ps
}

proc transaction send_done_msgs : ($ps : list_parties) |- ($d : 1) =
{
  case $ps (
    cons => $p <- recv $ps ;
            $dtl <- send_done_msgs <- $ps ;
            $p.done ;
            m = recv $p ;
            wait $p ;
            wait $dtl ;
            close $d
  | nil => wait $ps ;
           close $d
  )
}

proc transaction main : . |- ($mn : 1) =
{
  let N = 5 ;
  let T = 4 ;
  let m = 1729 ;
  let dealer_id = 0;
  $d <- dealer_init <- dealer_id m ;
  $ps <- create_parties <- N T dealer_id $d ;
  let I = 1;
  let J = 1;
  $ps_out <- create_all_communicators <- I J N $ps ;
  $dn <- send_done_msgs <- $ps_out ;
  wait $dn ;
  close $mn
}

exec main