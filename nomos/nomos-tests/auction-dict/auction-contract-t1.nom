type money =  <{*}| &{value : int ^ |{*}> money,
                      plus : money -o |{*}> money,
                      minus : int -> +{sufficient : money * |{*}> money,
                                       insufficient : |{*}> money},
                      destroy : |{*}> 1}

type auction = /\ <{*}| +{running : money -o |{*}> \/ auction,
                          ended : +{won : lot * |{*}> \/ auction,
                                    lost : money * |{*}> \/ auction},
                          terminated : |{*}> \/ auction}

type lot = +{some : coin, none : 1}

proc asset empty_lot : . |{*}- ($l : lot) =
{
  $l.none ;
  close $l
}

type bid_map = Map<address, money>

proc contract running_auction :
  (winner : address), (max_bid : int),
  (owner : address), ($bm : bid_map), ($l : lot) |{*}- (#a : auction) =
{
  $la <- accept #a ;
  get $la {*} ;
  $la.running ;
  $m <- recv $la ;
  pay $m {*} ;
  $m.value ;
  mv = recv $m ;
  get $m {*} ;
  pay $la {*} ;
  #a <- detach $la ;
  let addr = Nomos.GetTxnSender() ;
  $bm.insert(addr, $m) ;
  if mv > max_bid
  then
    #a <- run_or_end <- addr mv owner $bm $l
  else
    #a <- run_or_end <- winner max_bid owner $bm $l
}

proc contract run_or_end :
  (winner : address), (max_bid : int),
  (owner : address), ($bm : bid_map), ($l : lot) |{*}- (#a : auction) =
{
  if $bm.size < 5
  then
    #a <- running_auction <- winner max_bid owner $bm $l
  else
    #a <- ended_auction <- winner max_bid owner $bm $l
}

proc contract ended_auction :
  (winner : address), (max_bid : int),
  (owner : address), ($bm : bid_map), ($l : lot) |{*}- (#a : auction) =
{
  $la <- accept #a ;
  get $la {*} ;
  $la.ended ;
  let addr = Nomos.GetTxnSender() ;
  if winner == addr
  then
    $la.won ;
    send $la $l ;
    pay $la {*} ;
    #a <- detach $la ;
    $l <- empty_lot <- ;
    #a <- end_or_terminate <- winner max_bid owner $bm $l
  else
    $la.lost ;
    $m <- $bm.delete(addr) ;
    send $la $m ;
    pay $la {*} ;
    #a <- detach $la ;
    #a <- end_or_terminate <- winner max_bid owner $bm $l
}

proc contract end_or_terminate :
  (winner : address), (max_bid : int),
  (owner : address), ($bm : bid_map), ($l : lot) |{*}- (#a : auction) =
{
  $bm.close ;
  $bm.next ;

  case $bm (
    empty => wait $bm ; #a <- terminated_auction <- $l
  | nonempty => #a <- ended_auction <- winner max_bid owner $bm $l
  )
}

proc contract terminated_auction : ($l : lot) |{*}- (#a : auction) =
{
  $la <- accept #a ;
  get $la {*} ;
  $la.terminated ;
  pay $la {*} ;
  #a <- detach $la ;
  #a <- terminated_auction <- $l
}