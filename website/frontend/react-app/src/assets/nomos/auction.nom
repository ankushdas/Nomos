type Coin = 1
type lCoin = +{cons : Coin * lCoin, nil : 1}

type money = &{value : <{*}| int ^ money,
               Coins : <{*}| lCoin}

proc asset wallet : (n : int), ($l : lCoin) |{*}- ($m : money) =
  {
    case $m (
      value => get $m {*} ;
               send $m n;
               work {*} ;
               $m <- wallet <- n $l
    | Coins => get $m {*} ;
               work {*} ;
               $m <- $l
    )
  }

proc asset empty : . |{*}- ($l : lCoin) =
  {
    $l.nil ;
    close $l
  }

proc asset empty_wallet : . |{*}- ($m : money) =
  {
    $l <- empty <- ;
    let n = 0 ;
    $m <- wallet <- n $l
  }

type auction = /\ +{running : &{bid : int -> money -o \/ auction,
                                       cancel : \/ auction},
                    ended : &{collect : int -> +{won : lot * \/ auction,
                                                 lost : money * \/ auction},
                              cancel : \/ auction}}

type bid = &{addr : int ^ bid, val : money}
type bids = +{cons : bid * bids, nil : 1}
type lot = 1

proc asset bidproc : (r : int), ($m : money) |{*}- ($b : bid) =
  {
    case $b (
      addr => send $b r ;
              $b <- bidproc <- r $m
    | val => $b <- $m
    )
  }

proc asset cons_bid : ($b : bid), ($bs : bids) |{*}- ($newbs : bids) =
  {
    $newbs.cons ;
    send $newbs $b ;
    $newbs <- $bs
  }

proc asset addbid : (r : int), ($m : money), ($bs : bids) |{*}- ($newbs : bids) =
  {
    $b <- bidproc <- r $m ;
    $newbs <- cons_bid <- $b $bs
  }

proc contract run : ($b : bids), ($l : lot) |{*}- (#sa : auction) =
{
  $la <- accept #sa ;
  $la.running ;
  case $la (
    bid => r = recv $la ;
           $m <- recv $la ;
           #sa <- detach $la ;
           $newb <- addbid <- r $m $b ;
           $sa <- run <- $newb $l
  | cancel => #sa <- detach $la ;
              #sa <- run <- $b $l
  )
}

proc asset empty_bids : . |{*}- ($bs : bids) =
  {
    $bs.nil ;
    close $bs
  }

proc asset append_bids : ($l1 : bids), ($l2 : bids) |{*}- ($l : bids) =
  {
    case $l1 (
      cons => $x <- recv $l1 ;
              $l.cons ;
              send $l $x ;
              $l <- append_bids <- $l1 $l2
    | nil => wait $l1 ;
             $l <- $l2
    )
  }

proc asset removebid_helper : (r : int), ($bs : bids), ($acc : bids) |{*}- ($newbs : money * bids) =
  {
    case $bs (
      cons => $b <- recv $bs ;
              $b.addr ;
              r1 = recv $b ;
              if r = r1
              then
                $b.val ;
                send $newbs $b ;
                $newbs <- append_bids <- $bs $acc
              else
                $newacc <- cons_bid <- $b $acc ;
                $newbs <- removebid_helper <- r $bs $newacc
    | nil => wait $bs ;
             $m <- empty_wallet <- ;
             send $newbs $m ;
             $newbs <- $acc
    )
  }

proc asset removebid : (r : int), ($bs : bids) |{*}- ($newbs : money * bids) =
  {
    $acc <- empty_bids <- ;
    $newbs <- removebid_helper <- r $bs $acc
  }

proc contract end_lot : (w : int), ($b : bids), ($l : lot) |{*}- (#sa : auction) =
{
  $la <- accept #sa ;
  $la.ended ;
  case $la (
    collect => r = recv $la ;
               if w = r
               then
                  $la.won ;
                  send $la $l ;
                  #sa <- detach $la ;
                  #sa <- end_nolot <- w $b
               else
                  $la.lost ;
                  $newb <- removebid <- r $b ;
                  $m <- recv $newb ;
                  send $la $m ;
                  #sa <- detach $la ;
                  #sa <- end_lot <- w $newb $l
  | cancel => #sa <- detach $la ;
              #sa <- end_lot <- w $b $l
  )
}

proc contract end_nolot : (w : int), ($b : bids) |{*}- (#sa : auction) =
{
  $la <- accept #sa ;
  $la.ended ;
  case $la (
    collect => r = recv $la ;
               $la.lost ;
               $newb <- removebid <- r $b ;
               $m <- recv $newb ;
               send $la $m ;
               #sa <- detach $la ;
               #sa <- end_nolot <- w $newb
  | cancel => #sa <- detach $la ;
              #sa <- end_nolot <- w $b
  )
}