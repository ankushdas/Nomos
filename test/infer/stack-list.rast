#test success
#options -work=send

type A = 1
type listA = +{cons : |{*}> A * listA,
               nil : |{*}> 1}

type stackA = &{ins : <{2}| A -o stackA,
                del : <{*}| +{some : A * stackA,
                              none : 1}}

proc nil : . |{*}- (l : listA) =
  l.nil ;
  pay l {*} ;
  close l

proc cons : (x : A), (t : listA) |{*}- (l : listA) =
  l.cons ;
  pay l {*} ;
  send l x ;
  l <- t

proc stack_new : . |{*}- (s : stackA) =
  l <- nil <- ;
  s <- stack <- l

proc stack : (l : listA) |{*}- (s : stackA) =
  case s (
    ins => get s {*} ;
           x <- recv s ;
           m <- cons <- x l ;
           s <- stack <- m
  | del => get s {*} ;
           case l (
            cons => get l {*} ;
                    x <- recv l ;
                    s.some ;
                    send s x ;
                    s <- stack <- l
          |  nil => s.none ;
                    get l {*} ;
                    wait l ;
                    close s
    )
  )